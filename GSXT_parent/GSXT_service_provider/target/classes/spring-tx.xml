<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

        <!--开启基于注解的事务，使用xml配置形式的事务（一般主要使用配置式）-->
    <!--配置切入点表达式表示对那个方法进行扩展事务功能-->
    <aop:config>
        <!--切入点表达式,定位到目标方法-->
        <aop:pointcut id="txPoint" expression="execution(* com.gsxt.service.Impl..*(..))"/>
        <!--配置事务增强的类-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!--配置事务增强，事务如何切入-->
    <!--spring配置文件的核心点（数据源，与mybatis的整合，事务控制）-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性，传播行为，隔离级别...-->
        <tx:attributes>
            <!--如果不设置就没有事务-->
            <!--增删该方法：配置传播行为，回滚异常-->
            <!--REQUIRED默认值，表示当前方法必须工作在事务中，如果当前线程上没有开启事务，则自己开新事务，如果已经有了，那么使用当前事务
                用别人事务时有可能被回滚
            REQUIRES_NEW：建议使用，表示不管当前线程有没有事务，都要自己开事务，在自己的事务中运行-->
            <!--rollback-for属性：配置事务方法针对什么样的异常回滚
                默认：运行异常回滚
                建议：编译时异常和运行时异常都回滚-->

            <!--增加开头的方法-->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!--修改开头的方法-->
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!--删除开头的方法-->
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!--批处理有关的方法-->
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!-- 以get..开始的所有等查询方法是查询操作：配置只读属性，让数据库知道这是一个查询操作，能够进行一定的优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!--事务管理器控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源，ref如果在两个不同的配置文件那在ioc容器中可以找到-->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>
</beans>